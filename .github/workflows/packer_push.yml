name: PR Merge Packer test

on:
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy-ami:
    runs-on: ubuntu-latest 
    services:
        postgres:
          image: postgres:14
          env:
            POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB: ${{ vars.POSTGRES_DB }}
          ports:
            - 5432:5432
          options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3
          
    steps:
        - name: Checkout repository code
          uses: actions/checkout@v4

        - name: Set up Python
          uses: actions/setup-python@v2
          with:
            python-version: 3.11
        
        - name: Install dependencies
          run: |
            cd webapp
            python -m pip install --upgrade pip
            pip install -r requirements.txt

        - name: Move users.csv to /opt
          run: |
            cd webapp
            cp users.csv /opt
  
         # Running integration test first
        - name: Run tests (PostgreSQL)
          run: |
            cd webapp
            export DATABASE_URL=${{ secrets.DATABASE_URL }}
            export REGION=${{vars.REGION}}
            python IntegrationTest.py

        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{vars.region}}

        - name: Build webapp artifacts
          run: |
            ls -la
            cd webapp
            rm -rf __pycache__
            cd ..
            zip -r webapp.zip webapp
            
           # Initialize Packer templates
        - name: Check location of files
          run: |
            pwd
            ls -la
            
        - name: Setup Packer
          uses: hashicorp/setup-packer@main
          id: setup
          with:
            version: "latest"

        - name: Check Packer version
          run: packer version

        - name: Packer init
          run: |
            cd webapp
            packer init ./aws-debian.pkr.hcl

        - name: Build AMI
          run: |
            mv webapp.zip webapp/
            cd webapp
            packer build -var "aws_region=${{ vars.AWS_REGION_PACKER }}" -var "group=${{ vars.GROUP_PACKER }}" -var "user=${{ vars.USER_PACKER }}" -var "source_ami=${{ vars.SOURCE_AMI_PACKER }}" -var "ssh_username=${{ vars.SSH_USERNAME_PACKER }}" -var "subnet_id=${{ vars.SUBNET_ID_PACKER }}" -var "ami_users=${{ vars.AMI_USERS_PACKER }}" -var "instance_type=${{ vars.INSTANCE_TYPE_PACKER }}" -var "volume_size=${{ vars.VOLUME_SIZE_PACKER }}" -var "volume_type=${{ vars.VOLUME_TYPE_PACKER }}" -var "delay_seconds=${{ vars.DELAY_SECONDS_PACKER }}" -var "device_name=${{ vars.DEVICE_NAME_PACKER }}" -var "max_attempts=${{ vars.MAX_ATTEMPTS_PACKER }}" ./aws-debian.pkr.hcl
  update-launch-template-demo:
    #needs: build-and-deploy-ami
    runs-on: ubuntu-latest
    steps:
      - name: Configure Continuous Deployment AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEPLOY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEPLOY }}
          aws-region: ${{vars.region}}
      - name: Get latest AMI
        run: |
          # Retrieve the latest AMI
          LATEST_AMI=$(aws ec2 describe-images --filters 'Name=name,Values=csye6225*' --query 'sort_by(Images,&CreationDate)[-1].ImageId' --output text)
          echo $LATEST_AMI
          # LAUNCH_TEMPLATE_ID=${{ secrets.LAUNCH_TEMPLATE_ID_DEV }}
          # VERSION_OUTPUT=$(aws ec2 create-launch-template-version --launch-template-id $LAUNCH_TEMPLATE_ID --version-description "New version" --source-version $NEW_AMI_ID)
          # VERSION_NUMBER=$(echo $VERSION_OUTPUT | jq -r '.LaunchTemplateVersion.VersionNumber')
          # echo "NEW_VERSION=$VERSION_NUMBER" >> $GITHUB_OUTPUT
      - name: Get current ASG
        run: |
          ASG=$(aws autoscaling describe-auto-scaling-groups --query AutoScalingGroups[].AutoScalingGroupName --filters "Name=tag:Name,Values=csye6225-asg-ec2" --output text)
          echo $ASG
      - name: Get Launch template ID for ASG
        run: |
          LAUNCH_TEMPLATE_ID=$(aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[0].LaunchTemplate.LaunchTemplateId' --auto-scaling-group-names $ASG --output json | jq -r '.')
          echo $LAUNCH_TEMPLATE_ID
      - name: Create new launch template version
        run: |
          aws ec2 create-launch-template-version --launch-template-id $LAUNCH_TEMPLATE_ID --version-description "Updated version with new AMI" --source-version $LATEST_AMI